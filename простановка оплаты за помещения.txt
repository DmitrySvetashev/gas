// создание меню команд
function onOpen() {
  SpreadsheetApp.getUi()
  // добавление пункта меню в оболочку
  .createMenu('Команды')
  // добавление подпунктов
  .addItem('Проставить оплату', 'mailSync')
  .addItem('Синхронизировать контакты', 'contSync')
  .addToUi();
}

// заполнение информации об оплате
function mailSync() {
  var emailCount = 0;
  var payCount = 0;
  // получаем список цепочек входящих писем

var debugSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Debug');
var lastRowDebug = 1;
debugSheet.getRange(2,1,999,20).clearContent();

  var threads = GmailApp.getInboxThreads();
  for (var i = 0; i < threads.length; i++) {

//    if (emailCount > 0) {break}
    // получаем текущее сообщение из цепочки
    var messages = threads[i].getMessages();
    for (var j = 0; j < messages.length; j++) {
//    if (emailCount > 0) {break}
      var mailSender = messages[j].getFrom();
      var mailSenderAddr = mailSender.search("3700404@gmail.com");

//mailSenderAddr = 11;

lastRowDebug++;
debugSheet.getRange(lastRowDebug,1).setValue(mailSender);
debugSheet.getRange(lastRowDebug,2).setValue(mailSenderAddr);

      // проверяем, если сообщение от нужного адресата и оно не прочитано - наш клиент
      if ((mailSenderAddr > 0) & (messages[j].isUnread())) {
        // помечаем сообщение звездочкой - начало обработки
        messages[j].star();
        var messMonth = (messages[j].getDate().getFullYear()-2021)*12+messages[j].getDate().getMonth()+1;
        emailCount ++;

debugSheet.getRange(lastRowDebug,3).setValue(messages[j].getDate());      
debugSheet.getRange(lastRowDebug,4).setValue(messMonth);

        var foundCell = 0;
        // получаем тело письма и потрошим его по ключевым фразам
        var messBody = messages[j].getBody();

//        messBody = "<br><br><b>Платеж от:</b> Ковин Леонид Артурович<br><b>на сумму:</b> 8000.00 р.<br><b> описание услуги:</b> аренда помещения: №: A1<br><b>период оплаты: </b> С 24.06.2021 ПО 31.07.2021 </div>";
debugSheet.getRange(lastRowDebug,5).setValue(messBody);

        var fioStart = messBody.indexOf("Платеж от:");

debugSheet.getRange(lastRowDebug,6).setValue(fioStart);

        if (fioStart < 0) {break}
        var sumStart = messBody.indexOf("на сумму:");
        var srvStart = messBody.indexOf("описание услуги:");
        var payStart = messBody.indexOf("период оплаты:");
        var fioArr = messBody.substring(fioStart,sumStart);
        var sumArr = messBody.substring(sumStart,srvStart);
        var srvArr = messBody.substring(srvStart,payStart);
        var payArr = messBody.substr(payStart,messBody.length-payStart);
        // выделяем нужную информацию о заказчике, сумме, помещении и периоде
        var clientFio = strBwn (fioArr,"</b> ", "<br>");
        clientFio = clientFio.trim();
        clientFio = clientFio.replace("  "," ");        
        clientFio = clientFio.replace("  "," ");
        clientFio = clientFio.toUpperCase();
        var clientSum = strBwn (sumArr,"</b> ", " р.");
        clientSum = clientSum.replace(".",",");
        var clientSrv = strBwn (srvArr,"№: ", "<br>");
        var clientDat = strBwn (payArr,"С ", " ");
        if (clientDat.length < 24) clientDat = strBwn (payArr,"С ", "21") + "21";
        if (clientDat.length < 24) clientDat = strBwn (payArr,"С ", "22") + "22";
        var clientDatS = clientDat.substr(0,10);
        var clientDatE = clientDat.substr(14,10);
        var clientDatEE = new Date(Number(clientDatE.substr(6,4)),Number(clientDatE.substr(3,2))-1,Number(clientDatE.substr(0,2)));
        var MILLIS_PER_DAY = 1000 * 60 * 60 * 24;
        var clientDatEEE = new Date(clientDatEE.getTime() + MILLIS_PER_DAY);
        clientDatE = Utilities.formatDate(clientDatEEE,"UTC","dd.MM.yyyy");

debugSheet.getRange(lastRowDebug,7).setValue(clientFio);
debugSheet.getRange(lastRowDebug,8).setValue(clientSum);
debugSheet.getRange(lastRowDebug,9).setValue(clientSrv);
debugSheet.getRange(lastRowDebug,10).setValue(clientDat);
debugSheet.getRange(lastRowDebug,11).setValue(clientDatS);
debugSheet.getRange(lastRowDebug,12).setValue(clientDatE);

        // задаем правила поиска помещений
        if ((clientSrv.charCodeAt(0) == 88) || (clientSrv.charCodeAt(0) == 120)) var clientSrv = clientSrv.toLowerCase()
        if (clientSrv.charCodeAt(0) > 47) var paySheetName = "Оплата Кап"
        if (clientSrv.charCodeAt(0) > 64) var paySheetName = "Оплата Бел"
        if (clientSrv.charCodeAt(0) > 96) var paySheetName = "Оплата НО"  

debugSheet.getRange(lastRowDebug,13).setValue(paySheetName);      
        
        var paySheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(paySheetName);
        // определяем зону платежей = имя таблицы с _ вместо пробела
        var payTable = SpreadsheetApp.getActiveSpreadsheet().getRangeByName(paySheetName.substr(0,6)+"_"+paySheetName.substr(7,paySheetName.length-7));
        var lastRow = payTable.getLastRow();
        var rooms = paySheet.getRange(2,1,lastRow,1).getValues();
        var clients = paySheet.getRange(2,9,lastRow,1).getValues();

        // запускаем поиск по номеру помещения
        foundCell = rooms.findIndex(clientSrv);

debugSheet.getRange(lastRowDebug,14).setValue(foundCell+2);      

        if (foundCell >= 0) {
          var endCC = clients[foundCell][0].toUpperCase().indexOf("ДОГОВОР");
          var curCli = clients[foundCell][0].substr(0,endCC-1).toUpperCase();

debugSheet.getRange(lastRowDebug,15).setValue(clients[foundCell][0]);
debugSheet.getRange(lastRowDebug,16).setValue(curCli);

          curCli = curCli.trim();
          curCli = curCli.replace("  "," ");

          // проверяем - тот ли это клиент
          if (clientFio == curCli) {
            payCount++;
            var payTableLastCol = paySheet.getLastColumn(); 
            var payMonthArr = paySheet.getRange(foundCell+2,payTable.getColumn(),1,payTableLastCol);
            // оплата производится в зону именованного диапазона оплат
            var payMonth = Number(clientDatS.split(".")[1])+12*(Number(clientDatS.split(".")[2])-2021);
            var remMonth = Number(clientDatE.split(".")[1])+12*(Number(clientDatE.split(".")[2])-2021);

debugSheet.getRange(lastRowDebug,17).setValue(payMonth);     
debugSheet.getRange(lastRowDebug,18).setValue(remMonth);     

//            var payMonthArr = paySheet.getRange(foundCell+2,payTable.getColumn(),1,remMonth);
            var payBefore = payMonthArr.getCell(1,messMonth).getValue().toString();
            payBefore = payBefore.replace(".",",");
            payMonthArr.getCell(1,messMonth).setFormula("="+payBefore+"+"+clientSum);
            var oldNote = payMonthArr.getCell(1,messMonth).getNote();
            payMonthArr.getCell(1,messMonth).setNote("Платеж от: " + clientFio + "\nна сумму: " + clientSum + "\nописание услуги: " + clientSrv + "\nпериод оплаты: " + clientDat + "\n" + oldNote);
            
            // красим ячейки и добавляем примечание
            paySheet.getRange(foundCell+2,payTable.getColumn()+payMonth-1,1,remMonth-payMonth+1).setBackground("lime");
            oldNote = payMonthArr.getCell(1,remMonth).getNote();
            payMonthArr.getCell(1,remMonth).setNote("Требуется оплата " + clientDatE + "\n" + oldNote);
            payMonthArr.getCell(1,remMonth).setBackground("yellow")
            // помечаем сообщение как прочитанное и снимаем звездочку
            messages[j].unstar();
            messages[j].markRead();
          }
        }
      }
    }
  }
  // выводим статистику
  var statInfo = String(emailCount) + " писем обработано. " + String(payCount) + " оплат внесено";
  SpreadsheetApp.getActiveSpreadsheet().toast(statInfo, "Статус", 3);
}

// функция поиска строки между fStr и lStr
function strBwn (str, fStr, lStr) {
  var fNdx = str.indexOf(fStr) + fStr.length;
  var lNdx = str.lastIndexOf(lStr);
  return str.substring(fNdx,lNdx);
}

// заполнение листа "Арендаторы"
function contSync() {
// получение данных из группы "Арендаторы" Контактов
var clientsG = ContactsApp.getContactGroup("Арендаторы");
var clients = clientsG.getContacts();
// получение текущего положения
var curSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Арендаторы");
// очистка
curSheet.getRange(2,2,500,7).clear();
// заполнение полей данными
for (var i=0; i<clients.length; i++) {
  curSheet.getRange(i+2, 2, 1, 1).setValue(clients[i].getGivenName());
  curSheet.getRange(i+2, 3, 1, 1).setValue(clients[i].getFamilyName());  
  curSheet.getRange(i+2, 5, 1, 1).setValue(clients[i].getCompanies()[0].getJobTitle());
  curSheet.getRange(i+2, 6, 1, 1).setValue(clients[i].getEmails()[0].getAddress()); 
  curSheet.getRange(i+2, 7, 1, 1).setValue(clients[i].getPhones()[0].getPhoneNumber()); 
  curSheet.getRange(i+2, 8, 1, 1).setValue(clients[i].getNotes()); 
  }
}

// функция поиска значения в массиве
Array.prototype.findIndex = function(search){
  if(search == "") return -1;
  for (var i=0; i<this.length; i++)
    if (this[i] == search) return i;
  return -1;
}
